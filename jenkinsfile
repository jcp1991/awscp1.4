pipeline {
    agent any

    stages {
        stage('Get Code') {
            steps {
                cleanWs()
                git url: 'https://github.com/jcp1991/awscp1.4.git', branch: 'develop'
            }
        }

        stage('Static Analysis') {
            parallel {
                stage('flake8') {
                    steps {
                        sh '''
                            flake8 --exit-zero --format=pylint src > flake8.out
                        '''
                        recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [
                            [threshold: 10, type: 'TOTAL', unstable: false],
                            [threshold: 12, type: 'TOTAL', unstable: false]
                        ]
                    }
                }
                stage('bandit') {
                    steps {
                        sh '''
                            bandit --exit-zero -r src -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                        '''
                        recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [
                            [threshold: 1, type: 'TOTAL', unstable: false],
                            [threshold: 2, type: 'TOTAL', unstable: false]
                        ]
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Verificar si la pila ya está desplegada
                    def alreadyDeployed = sh(script: '''
                        aws cloudformation describe-stacks --stack-name todo-list-aws-production --region us-east-1
                    ''', returnStatus: true)

                    if (alreadyDeployed != 0) {
                        // Construir y validar SAM
                        sh '''
                            sam build
                            sam validate --config-file samconfig.toml --region us-east-1
                        '''

                        // Desplegar la pila SAM
                        sh '''
                            sam deploy --stack-name todo-list-aws-production --capabilities "CAPABILITY_IAM" --s3-bucket aws-sam-cli-managed-default-samclisourcebucket-nqyfysup146y --s3-prefix todo-list-aws --region us-east-1 --parameter-overrides Stage="production"
                        '''
                    }
                }
            }
        }

        stage('Rest Test') {
    steps {
        script {
            def apiUrl = sh(script: '''
                aws cloudformation describe-stacks --stack-name todo-list-aws-production --query "Stacks[0].Outputs[?OutputKey=='BaseUrlApi'].OutputValue" --output text
            ''', returnStdout: true).trim()

            env.BASE_URL = apiUrl

            // Llamada curl para obtener todos los todos
            def getAllTodosCmd = "curl -s ${env.BASE_URL}/todos"
            def allTodosResult = sh(script: getAllTodosCmd, returnStdout: true).trim()

            // Llamada curl para obtener un todo específico (ajustar según tu API)
            def getSpecificTodoCmd = "curl -s ${env.BASE_URL}/todos/1"
            def specificTodoResult = sh(script: getSpecificTodoCmd, returnStdout: true).trim()

            // Debugging: Imprimir resultados de las llamadas curl
            echo "URL Base de la API: ${env.BASE_URL}"
            echo "Respuesta de getAllTodosCmd: ${allTodosResult}"
            echo "Respuesta de getSpecificTodoCmd: ${specificTodoResult}"

            // Manejo de errores si la respuesta de specificTodoResult es vacía
            if (specificTodoResult.isEmpty()) {
                error "No se pudo obtener el todo específico. Las pruebas de integración han fallado."
            } else {
                // Validación de resultados (ajustar según tu API)
                if (allTodosResult.contains("Integration text example") && specificTodoResult.contains("Integration text example")) {
                    echo "Pruebas de integración exitosas."
                } else {
                    error "Las pruebas de integración han fallado."
                }
            }
        }
    }
}

        stage('Promote') {
            steps {
                script {
                    // Configurar las credenciales para el repositorio
                    withCredentials([string(credentialsId: 'luna', variable: 'GIT_TOKEN')]) {
                        // Configurar usuario y correo de Git
                        sh '''
                            git config --global user.name "jcp1991"
                            git config --global user.email "josecoca91@hotmail.com"
                        '''

                        // Cambiar a la rama master y actualizar desde el repositorio remoto
                        sh '''
                            git checkout master
                            git pull origin master
                        '''

                        // Fusionar la rama develop en master con estrategia ours
                        sh '''
                            git merge -X ours origin/develop --no-commit --no-ff
                        '''

                        // Asegurarse de que solo se actualice el Jenkinsfile
                        sh '''
                            git reset HEAD jenkinsfile
                            git checkout -- jenkinsfile
                            git add jenkinsfile
                            git commit -m "Merge develop into master, preserving jenkinsfile"
                        '''

                        // Subir los cambios fusionados a la rama master
                        sh "git push https://${GIT_TOKEN}@github.com/jcp1991/awscp1.4.git master"
                    }
                }
            }
        }
    }
}
