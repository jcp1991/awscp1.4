pipeline {
    agent any
    options {
        // This is required if you want to clean before build
        skipDefaultCheckout(true)
    }
    stages {
        stage('Get Code') {
            steps {
                // Clean before build
                cleanWs()
                git branch: 'develop', url: 'https://github.com/jcp1991/awscp1.4.git/'
            }
        }
        
        stage('Static') {
            parallel {
                stage('flake8') {
                    steps {
                        sh '''
                            flake8 --exit-zero --format=pylint src > flake8.out
                        '''
                        recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [
                            [threshold: 10, type: 'TOTAL', unstable: false],
                            [threshold: 12, type: 'TOTAL', unstable: false]
                        ]
                    }
                }
                stage('Bandit') {
                    steps {
                        sh '''
                            bandit --exit-zero -r src -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                        '''
                        recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [
                            [threshold: 1, type: 'TOTAL', unstable: false],
                            [threshold: 2, type: 'TOTAL', unstable: false]
                        ]
                    }
                }
            }
        }
        stage('Deplo') {
            steps {
                sh '''
                    sam build
                    sam deploy --stack-name "todo-list-aws" --region "us-east-1" --s3-bucket aws-sam-cli-managed-default-samclisourcebucket-upt09go84tay --no-fail-on-empty-changeset --on-failure DO_NOTHING
                '''
            }
        }
        stage('Rest') {
            environment {
                BASE_URL = """${sh(
                        returnStdout: true,
                        script: 'sam list endpoints --stack-name todo-list-aws --region us-east-1 --output json | jq -r \'.[] | select(.LogicalResourceId=="ServerlessRestApi").CloudEndpoint | .[0]\' | tr -d \'\n\t\''
                    )}""" 
            }
            steps {
                sh '''
                    pytest --junitxml=result-rest.xml -s ${WORKSPACE}/test/integration/todoApiTest.py
                '''
                junit 'result-rest.xml'
            }
        }
     
    }
}
