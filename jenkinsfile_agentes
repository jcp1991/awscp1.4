pipeline {
    agent none

    stages {
        stage('Get Code') {
            agent any
            steps {
                cleanWs()
                git url: 'https://github.com/jcp1991/awscp1.4.git', branch: 'develop'
            }
        }

        stage('Static Analysis') {
            agent {
                label 'agente2'
            }
            stages {
                stage('flake8') {
                    steps {
                        sh '''
                            flake8 --exit-zero --format=pylint src > flake8.out
                        '''
                        recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [
                            [threshold: 10, type: 'TOTAL', unstable: false],
                            [threshold: 12, type: 'TOTAL', unstable: false]
                        ]
                    }
                }
                stage('bandit') {
                    steps {
                        sh '''
                            bandit --exit-zero -r src -f custom -o bandit.out --severity-level medium --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                        '''
                        recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [
                            [threshold: 1, type: 'TOTAL', unstable: false],
                            [threshold: 2, type: 'TOTAL', unstable: false]
                        ]
                    }
                }
            }
        }

        stage('Deploy') {
            agent any
            steps {
                script {
                    def already_deployed = sh(script: '''
                        aws cloudformation describe-stacks --stack-name todo-list-aws-production --region us-east-1
                    ''', returnStatus: true)

                    if (already_deployed != 0) {
                        sh '''
                            sam build
                            sam validate --config-file samconfig.toml --region us-east-1
                            sam deploy --stack-name todo-list-aws-production --capabilities "CAPABILITY_IAM" --s3-bucket aws-sam-cli-managed-default-samclisourcebucket-nqyfysup146y --s3-prefix todo-list-aws --region us-east-1 --parameter-overrides Stage="production"
                        '''
                    }
                }
            }
        }

        stage('Set Base URL') {
            agent any
            steps {
                script {
                    try {
                        def apiUrl = sh(script: '''
                            aws cloudformation describe-stacks --stack-name todo-list-aws-production --query "Stacks[0].Outputs[?OutputKey=='BaseUrlApi'].OutputValue" --output text
                        ''', returnStdout: true).trim()

                        env.BASE_URL = apiUrl
                        echo "BASE_URL configurada correctamente: ${env.BASE_URL}"
                    } catch (Exception e) {
                        echo "Error al configurar BASE_URL: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error "Fallo en la configuración de BASE_URL."
                    }
                }
            }
        }

        stage('Rest Test with Pytest') {
            agent {
                label 'agente3'
            }
            steps {
                script {
                    try {
                        sh '''
                            pytest test/integration/todoApiTest.py
                        '''
                        echo "Pruebas de integración con Pytest exitosas."

                    } catch (Exception e) {
                        echo "Error en la etapa Rest Test con Pytest: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        error "Fallo en las pruebas de integración con Pytest."
                    }
                }
            }
        }

        stage('Promote') {
            agent any
            steps {
                script {
                    withCredentials([string(credentialsId: 'luna', variable: 'GIT_TOKEN')]) {
                        sh '''
                            git config --global user.name "jcp1991"
                            git config --global user.email "josecoca91@hotmail.com"
                            git config -l
                        '''

                        sh '''
                            git checkout master
                            git pull origin master
                            git merge -X ours origin/develop --no-commit --no-ff
                            git reset jenkinsfile
                            git add jenkinsfile
                            git commit -m "Merge develop into master, preserving jenkinsfile"
                            git push https://${GIT_TOKEN}@github.com/jcp1991/awscp1.4.git master
                        '''
                    }
                }
            }
        }
    }
}
